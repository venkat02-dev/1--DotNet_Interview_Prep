==========================================================================

Plain Palindrome:
using System;

class Program
{
    static void Main()
    {
        Console.Write("Enter a string: ");
        string input = Console.ReadLine();

        if (IsPalindrome(input))
            Console.WriteLine("It's a palindrome!");
        else
            Console.WriteLine("Not a palindrome.");
    }

    static bool IsPalindrome(string text)
    {
        // Remove spaces and convert to lowercase
        string cleaned = text.Replace(" ", "").ToLower();

        // Reverse the string
        char[] charArray = cleaned.ToCharArray();
        Array.Reverse(charArray);
        string reversed = new string(charArray);

        return cleaned == reversed;
    }
}

=======================

public static string breakPalindrome(string palindromeStr)
{
    int len = palindromeStr.Length;

    if (len == 1)
        return "IMPOSSIBLE";

    char[] chars = palindromeStr.ToCharArray();

    for (int i = 0; i < len / 2; i++)
    {
        if (chars[i] != 'a')
        {
            chars[i] = 'a';
            return new string(chars);
        }
    }

    // If all characters are 'a', return IMPOSSIBLE
    return "IMPOSSIBLE";
}

==========================================================================

Bills 2:
Housing 
Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with  places after the decimal.
Note: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to  are acceptable.
Example: -There are  elements, two positive, two negative and one zero. Their ratios are ,  and . Results are printed as:
0.400000
0.200000
Function Description
Complete the plusMinus function in the editor below.
plusMinus has the following parameter(s):
* int arr[n]: an array of integers
Print Print the ratios of positive, negative and zero values in the array. Each value should be printed on a separate line with  digits after the decimal. The function should not return a value.
Input Format
The first line contains an integer, , the size of the array. The second line contains  space-separated integers that describe .
Constraints

Output Format
Print the following  lines, each to  decimals:
1. proportion of positive values
2. proportion of negative values
3. proportion of zeros
Sample Input
STDIN           Function
-----           --------
6               arr[] size n = 6
-4 3 -9 0 4 1   arr = [-4, 3, -9, 0, 4, 1]
Sample Output
0.500000
0.333333
0.166667
Explanation
There are  positive numbers,  negative numbers, and  zero in the array. The proportions of occurrence are positive: , negative:  and zeros: .

======
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'plusMinus' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void plusMinus(List<int> arr)
    {
      
            var k =0;
            var p = 0;
            var z = 0;
            foreach(int n in arr){
                if(n >0 ){
                    k+=1;
                } else if(n <0){
                    p+=1;
                } else{
                    z+=1;
                }              
            }
            
        int[] upArray = [k, p, z];
        int y = arr.Count;
        
        foreach(int m in upArray){
            
            Console.WriteLine(Math.Round((double)m / y, 6));  
        }
        
   

    }

}

class Solution
{
    public static void Main(string[] args)
    {
        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> arr = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt32(arrTemp)).ToList();

        Result.plusMinus(arr);
    }
}


===========

Two Sum

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.
Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

public class Solution {
    public int[] TwoSum(int[] nums, int target) {

       for (int i = 0; i < nums.Length; i++)
        {
            for (int j = i + 1; j < nums.Length; j++)
            {
                if (nums[i] + nums[j] == target)
                {
                    return new int[] { i, j };
                }
            }
        }
        
        return new int[] { -1, -1 }; 
    }
}
===========

FizzBuzz logic implemented in C#
FizzBuzz Rules:
=> Print numbers from 1 to 100

For multiples of 3, print "Fizz" instead of the number
For multiples of 5, print "Buzz" instead of the number
For multiples of both 3 and 5, print "FizzBuzz"

using System;

class Program
{
    static void Main()
    {
        for (int i = 1; i <= 100; i++)
        {
            if (i % 15 == 0)
                Console.WriteLine("FizzBuzz");
            else if (i % 3 == 0)
                Console.WriteLine("Fizz");
            else if (i % 5 == 0)
                Console.WriteLine("Buzz");
            else
                Console.WriteLine(i);
        }
    }
}

===================
FIZZBUZZ 2:
Given an integer n, return a string array answer (1-indexed) where:

answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.

Example 1:
Input: n = 3
Output: ["1","2","Fizz"]

Example 2:
Input: n = 5
Output: ["1","2","Fizz","4","Buzz"]

public class Solution {
    public IList<string> FizzBuzz(int n) {
        
    IList<string> answer = new List<String> {};
     
        
        for (int i = 1; i <= n; i++)
        {
            if(i % 3 == 0 && i % 5 == 0)
                answer.Add("FizzBuzz");
            else if (i % 3 == 0)
                answer.Add("Fizz");
            else if (i % 5 == 0)
                answer.Add("Buzz");
            else
                answer.Add(Convert.ToString(i));
        }
        
        return answer;
    }
}
