* Singleton: 
This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.
 
** Singleton Design Pattern:
1. The Singleton pattern ensures that a class has only one instance throughout the application's lifecycle and provides a global point of access to that instance. 
2. It's typically used in cases where we only want one instance of the object to be created and shared between all the clients. for example, you want to share some kind of global data  across a project. but you also want to ensure that only a single instance of the class is created. So at the time, Singleton pattern is the way out to do.
3. No client can create an instance of the object from out side. i.e the object should be created by itself.

=> Steps to implement singleton design patterns:
Define the singleton class should be sealed so that it could not be inherited by any other class. 
Define the constructor as private. [So that clients cannot create object of it/cannot create instance].
Define all the instances and methods as static.
Define a static property/method that takes care of singleton class instantiation and that property should be shared across applications and is solely responsible for returning a singleton instance.

Uses of Singleton Design Pattern : In essence, the Singleton pattern allows developers to control the instantiation of a class, ensuring that only one instance exists and is accessible from anywhere in the application. This is crucial in scenarios like caching, logging, and managing configurations where consistency and state management are key.

Logger :
Singleton pattern is a good option for the Logger class when we want to create one log file with the logged messages. If we have more than one instances of Logger in the application, a new log will be created with every instance.

Cache :
We can use Singleton pattern to implement caches as that provides a single global access to it.

Configuration Management: 
We can use Singleton pattern to implement configuration management class that loads application settings and ensures consistent access throughout the app.

Question: Describe where and why you used the Singleton pattern for logging in your application[Logging]:
"In a project I worked on, we used the Singleton pattern to manage a centralized logging service. The business requirement was to ensure that all logs were consistently written to a single destination (e.g., a file or database) without creating multiple instances of the logger, which could lead to conflicting log entries or performance issues."

Example Code:
public sealed class Logger
{
    private static readonly Logger _instance = new Logger();
    private Logger() { }

    public static Logger Instance => _instance;

    public void Log(string message) => Console.WriteLine(message);
}

Question: Explain the business purpose and how it added value [Logging]:
"By using the Singleton pattern for logging, we ensured that there was only one logger instance throughout the entire application. This approach prevented the creation of multiple instances of the logger, reducing overhead and avoiding issues with simultaneous writes to the log file. Additionally, we could easily manage the log level (e.g., Debug, Info, Error) and format across all parts of the system from a single place, ensuring consistency. This solution significantly improved the maintainability and debugging process for the team, since all logs were consistently structured and available in one centralized location."
or
"In my current project, I implemented the Singleton Design Pattern to ensure that there is only a single instance of the Splunk logger throughout the application's lifecycle. This was especially important in our microservices architecture, where we needed to centralize logging to Splunk while ensuring minimal overhead in terms of resource consumption.

In a microservices setup, this pattern is effective because the same logger instance is shared across all API endpoints, avoiding unnecessary creation of multiple logger instances and reducing the risk of performance issues.

Question: Describe where and why you used the Singleton pattern for caching in your application [Splunk Log]:
The primary business purpose of integrating Splunk as a logging solution in our microservices architecture is to enable centralized logging and real-time monitoring across all services. As our application grows and the number of microservices increases, it becomes crucial to have an efficient way to collect, analyze, and troubleshoot logs from all these distributed services.


Question: Describe where and why you used the Singleton pattern for caching in your application [Caching]:
Caching: The Singleton pattern is often used to implement cache systems, as it provides a single point of access to the cached data, allowing different parts of an application to utilize the same cache instance efficiently.

"In a recent project, we implemented the Singleton pattern to manage a caching service. The caching system was used to store frequently accessed data, such as user information and application settings, in memory to improve performance. The business requirement was to ensure that there was only one cache instance throughout the application, avoiding the overhead of multiple cache instances, which could lead to data inconsistency and increased memory usage."

Question: Explain the business purpose and how it added value [Caching]:
"By using the Singleton pattern for caching, we ensured that the cache was shared across the entire application and only loaded once. This reduced data retrieval time, as repeated database queries were avoided. Instead, data was fetched from the cache, making the application more responsive and efficient. It also helped in reducing the load on the backend systems by decreasing the number of database calls, which had a direct impact on system performance and scalability. Additionally, a single cache instance made it easier to manage cache invalidation and updates, ensuring data consistency throughout the application."


Real-World Example in .NET 5
Let's consider a caching service using the Singleton pattern. Below is how you might implement it in a .NET 5 application.

Startup.cs
In this file, we register the CacheService as a singleton service:

csharp
Copy code
public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton<ICacheService, CacheService>();
}
Here, we ensure that the same instance of CacheService is used throughout the application. Whenever any class requests ICacheService, it receives the same instance.

ActionPlanService.cs
The ActionPlanService consumes the ICacheService to fetch cached data:

Question: Describe where and why you used the Singleton pattern in your application:
"In one of the projects I worked on, I used the Singleton pattern to manage a centralized configuration service for the application. The business requirement was to have a global access point to configuration settings that could be used throughout the entire system, but we didn't want to load the configuration from a file multiple times or risk inconsistencies if there were multiple instances of the configuration manager."

Question: Explain the business purpose and how it added value:
"By using the Singleton pattern, we ensured that the configuration was loaded only once, reducing overhead and ensuring that the application always used the same settings across all modules. This improved performance because the configuration was read from disk just once, and it also maintained consistency across the application. Additionally, it made the code more maintainable and scalable, as developers could access the configuration using a simple global access point, making the system easier to extend and debug."




=================================================

Related Questions:
1. Can we use a static class rather than using a private constructor?
Answer: Yes, you can use a static class instead of a Singleton with a private constructor if you only need static methods and properties without any instance state. A static class cannot be instantiated, and all its members must be static. However, this approach lacks flexibility, as you can't implement interfaces or inherit from other classes.

=> Using a Singleton class with a private constructor is beneficial when you need:
*Instance state: If your class needs to maintain state across calls.
*Inheritance: If you want to allow for polymorphism or implement interfaces.
*Lazy initialization: A Singleton allows for lazy instantiation, creating the instance only when it is first needed, whereas static classes are initialized when the application loads.

2. How do you implement thread safety in a Singleton?
Answer: Thread safety can be implemented in a Singleton using several techniques. Here are two common methods:

**Locking: You can use a lock to ensure that only one thread can access the creation of the instance at a time. This is typically done using a lock statement.

// Step 0:  Class is marked as sealed: [ Sealed classes are used to restrict the users from inheriting the class.  No class can be derived from a sealed class ]
public sealed class Singleton
{
    // Step 1: Create a static instance of the class
    private static Singleton _instance;

    private static readonly object _lock = new object();
    
    // Step 2: Private constructor to prevent instantiation from outside
    private Singleton() { }

    // Step 3: Public static property to access the instance
    public static Singleton Instance
    {
        get
        {
            lock (_lock)
            {
            // Step 4: Lazy initialization (only when it's accessed)
                if (_instance == null)
                {
                    _instance = new Singleton();
                }
                return _instance;
            }
        }
    }
}

**Double-Check Locking: This method reduces the overhead of locking by first checking if the instance is null outside the lock.
public static Singleton Instance
{
    get
    {
        if (_instance == null)
        {
            lock (_lock)
            {
                if (_instance == null)
                {
                    _instance = new Singleton();
                }
            }
        }
        return _instance;
    }
}

3. What is double-check locking in the Singleton design pattern, and can we get rid of it?
Answer: Double-check locking is a performance optimization technique used in the Singleton pattern to reduce the overhead of acquiring a lock. It involves checking if the instance is null before and after acquiring the lock.

=> Here's how it works:
First, check if the instance is null. If it is, proceed to acquire a lock.
After acquiring the lock, check again if the instance is null before creating it.
This ensures that the lock is only acquired when necessary, improving performance in a multi-threaded environment.

=> Can we get rid of it?
*** Yes, you can eliminate double-check locking by using other techniques like:

Lazy Initialization: Using Lazy<T> provides thread-safe lazy initialization without needing explicit locking.
public sealed class Singleton
{
    private static readonly Lazy<Singleton> _instance = new Lazy<Singleton>(() => new Singleton());

    private Singleton() { }

    public static Singleton Instance => _instance.Value;
}

4. Can Singleton pattern code be made easy with the Lazy keyword?
Answer: Yes, using the Lazy<T> class in C# simplifies the implementation of the Singleton pattern by providing a straightforward way to achieve lazy initialization and thread safety without manual locking.

With Lazy<T>, the instance is created only when it is accessed for the first time, and it is inherently thread-safe. This makes the code cleaner and less error-prone, as you don’t have to manage locks or double-check logic.

***Summary
=> Static classes are suitable for utility functions but lack instance state and flexibility.
=> Thread safety in Singletons can be achieved with locking or double-check locking.
=> Double-check locking is a performance optimization, but it can be avoided using Lazy<T>.
=> Using Lazy<T> simplifies the Singleton pattern implementation, ensuring thread safety and lazy initialization.
 We can pronounce Lazy<T> as Lazy of T, where T is generic type.
------------------

MISC:
From<https://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm>
<https://www.geeksforgeeks.org/singleton-design-pattern/>

A Singleton design pattern says or enables a developer to write code where only one instance of a class is created and the threads or other processes should refer to that single instance of the class. 
It only allows one instance of a class responsible for sharing the resource, which is shared across all the clients or applications in a controlled state.
From <https://www.codeproject.com/Articles/1224371/Singleton-Design-Pattern-in-Csharp-Part>

Guidelines
Every pattern is based on certain guidelines which should be followed while implementing the pattern. Stick to the following guidelines whenever you need to implement singleton design pattern in C#.
Check that the implementation when done, creates only one instance of the class, and there should be only one point from where an instance is to be created.
The singleton's class constructors should be private so that no class can directly instantiate the singleton class.
There should be a static property/method that takes care of singleton class instantiation and that property should be shared across applications and is solely responsible for returning a singleton instance.
The C# singleton class should be sealed so that it could not be inherited by any other class. This is useful when we dealing with nested class structure. We'll discuss this scenario as well later when we implement singleton.
 
From <https://www.codeproject.com/Articles/1224371/Singleton-Design-Pattern-in-Csharp-Part>
 
