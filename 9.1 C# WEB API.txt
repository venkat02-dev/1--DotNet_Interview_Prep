ASP.NET Web API is a framework to build web apis, i.e Http based services on the top of .Net framework.
These services can then be consumed by a broad range
 
Question: What are RESTFUL Service?
REST stands for Representational State Transfer, rest is an architecural pattern for creating services  and uses HTTP protocol (web protocol) for implementation,  REST architectural pattern specifies a set of constriants that a system should adhere.

=> Rest Constraints:

1. Client Server[Client sends a request to the srver, and server responds to the clients request],

2.  Stateless[The communication between client must be stateless between requests, this means we should not be storing anything on the server related to the client],

3. Cacheable,

4. Uniform Interface[It defines interface Between the client and the server to]

5. Layered System,

6. Code on demand


 RequestVerbs: Thes verbs describe what should be done with the resource.[GET, POST, PUT, DELETE etc]

 Request Header: Contains additional information about the request.

 Request Body: Contains the data to send to the server

 Response Body:Contains the data sent as response from the server

 Response Status Codes: Provide the client with status of the request.[202, 201,200 etc]  
-------------------------------------------------
*** Web Api routing:

Routing in ASP.Net Web API is the process that will decide which action and which controller should be called.  It routes an incoming HTTP request to a particular action method on a Web API controller.  

In ASP.NET Web API, a controller is a class that handles HTTP requests. The public methods of the controller are called action methods or simply actions. When the Web API framework receives a request, it routes the request to an action.
To determine which action to invoke, the framework uses a routing table. The Visual Studio project template for Web API creates a default route:
This route is defined in the WebApiConfig.cs file, which is placed in the App_Start directory:
When the Web API framework receives an HTTP request, it tries to match the URI against one of the route templates in the routing table. If no route matches, the client receives a 404 error.
 
*** Web API supports two types of routing:
Convention-based Routing
Attribute Routing

 Convention-based Routing
 In the convention-based routing, Web API uses route templates to determine which controller and action method to execute. At least one route template must be added into route table in order to handle various HTTP requests.
 When we created Web API project using WebAPI template in the Create Web API Project section, it also added WebApiConfig class in the App_Start folder with default route
 In .Register() method, config.MapHttpAttributeRoutes() enables attribute routing

 name        Name of the route

 routeTemplate        URL pattern of the route

 defaults        An object parameter that includes default route values

 constraints        Regex expression to specify characteristic of route values

 handler        The handler to which the request will be dispatched.


 Attribute Routing:--- For .Net frameowrk
 Attribute routing is supported in Web API 2. As the name implies, attribute routing uses [Route()] attribute to define routes. The Route attribute can be applied on any controller or action method.
 In order to use attribute routing with Web API, it must be enabled in WebApiConfig by calling config.MapHttpAttributeRoutes() method. You can set a common prefix for an entire controller by using the [RoutePrefix] attribute:

EX:
public class ProductsController : ApiController
{
    // Basic attribute routing
    [Route("api/products/{id}")]
    public IHttpActionResult GetProductById(int id)
    {
        return Ok(new Product { Id = id, Name = "Product Name" });
    }
}

-----------
In.Net 8:

[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{

    [HttpPost("create")]
    public IActionResult CreateProduct([FromBody] Product product)
    {
        // Logic to create product
        return CreatedAtAction(nameof(GetProductById), new { id = product.Id }, product);
    }
}

 
 -----------------------------------------------------
Attribute Routing:--- For ASP.NET CORE 3.0 [Outdated Versio ]
Attribute routing uses a set of attributes to map actions directly to route templates. The following StartUp.Configure code is typical for a REST API and is used in the next sample:
      // FOR MVC  controllers
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");
        });

       // FOR WEB Map API controllers
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers(); // Map API controllers
        });

In the preceding code, MapControllers is called inside UseEndpoints to map attribute routed controllers.

--------------------------------------------------------
In .Net 8:
// Configure services   [FOR MVC controllers]
builder.Services.AddControllersWithViews();
Notes: Registers services for MVC controllers with views, enabling support for traditional web pages with controllers and views.

// Configure services   [FOR WEB Map API controllers]
builder.Services.AddControllers();
Notes: Registers services for API controllers only, enabling support for RESTful web APIs without views.

[Configure MVC route mapping]
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
Notes: Maps the default route for MVC controllers, specifying Home as the default controller and Index as the default action, with an optional id parameter.

[FOR WEB API controllers]
app.MapControllers(); // Map API controllers
Notes: Automatically maps all API controller routes based on their [Route] attributes for RESTful API endpoints.
--------------------------------------------------------

** Param Binding:[For Action methods]
=> Web API binds action method parameters either with URL's query string or with request body depending on the parameter type.
By default Web API gets the value of a primitive parameter from the query string and complex type parameter from the request body.
 
Web API will extract the JSON object from the Request body above and convert it into Student object automatically because names of JSON object properties matches with the name of Student class properties (case-insensitive).

Post action method cannot include multiple complex type parameters because at most one parameter is allowed to be read from the request body.
 From <https://www.tutorialsteacher.com/webapi/parameter-binding-in-web-api>
 ---------------------------------------------------

Question:  [FromUri] and [FromBody]
=> You have seen that by default Web API gets the value of a primitive parameter from the query string and complex type parameter from the request body.

Question: But, what if we want to change this default behaviour?
=> Use [FromUri] attribute to force Web API to get the value of complex type from the query string
=> Use [FromBody] attribute to get the value of primitive type from the request body, opposite to the default rules.
 
 From <https://www.tutorialsteacher.com/webapi/parameter-binding-in-web-api>
==================================================================================================================
 Action Method Return Types: [WEB API]
 => The Web API action method can have following return types.
 1. Void
 2. Primitive type or Complex type
 3. HttpResponseMessage
 4. IHttpActionResult

 From <https://www.tutorialsteacher.com/webapi/action-method-return-type-in-web-api>
 ===============================================================================================================

Question: What are HTTP Status Codes?
 HTTP Status Code Is 3-digit integer in which the first digit of the Status-Code defines the class of response. Response Header of each API response contains the HTTP Status Code. HTTP Status Codes are grouped into five categories based upon the first number.

**** HTTP Status codes
ApiController Method Description

1xx - represents informational responses
2xx - represents successful responses
3xx - represents redirects
4xx - represents client errors
5xx - represents server errors

200 - OK()
201 - CREATED() - used in POST or PUT methods.
202 - Accepted
301 - Moved Permanantly
302 - Redirect()
304 - NOT MODIFIED - used in conditional GET requests to reduce the bandwidth use of the network. Here, the body of the response sent should be empty.
400 - BADREQUEST() - This can be due to validation errors or missing input data.
401- UNAUTHORIZED() - This is returned when there is no valid authentication credentials sent along with the request.
403 - FORBIDDEN - sent when the user does not have access (or is forbidden) to the resource.
404 - NOT FOUND() - Resource method is not available.
409 - Conflict()
500 - INTERNALSERVERERROR() - server threw some exceptions while running the method.
502 - BAD GATEWAY - Server was not able to get the response from another upstream server.
503 - Service Unavialable

 ===================================

Question: What is MVC (Model View Controller)?
Model–view–controller (MVC) is a software architectural pattern for implementing user interfaces. It divides a given software application into three interconnected parts, so as to separate internal representation of information from the way that information is presented to or accepted from the user.

* MVC is a framework for building web applications using an MVC (Model View Controller) design, The MVC model has 3 logic layers,
The business layer (Model logic)
The display layer (View logic)
The input control (Controller logic)

The Model is the part of the application that handles the logic for the application data. Often model objects retrieve data (and store data) from a database.

The View is the part of the application that handles the display of the data. Most often the views are created from the model data.

The Controller is the part of the application that handles user interaction.

* Question: List out different return types of a controller action method?
There are total of nine return types we can use to return results from the controller to view. The base type of all these result types is ActionResult.

1. ViewResult (View) : This return type is used to return a webpage from an action method.
2. PartialviewResult (Partialview) : This return type is used to send a part of a view that will be rendered in another view.
3. RedirectResult (Redirect) : This return type is used to redirect to any other controller and action method depending on the URL.
4. RedirectToRouteResult (RedirectToAction, RedirectToRoute) : This return type is used when we want to redirect to any other action method.
5. ContentResult (Content) : This return type is used to return HTTP content type like text/plain as the result of the action.
6. jsonResult (json): This return type is used when we want to return a JSON message.
7. javascriptResult (javascript): This return type is used to return JavaScript code that will run in the browser.
8. FileResult (File) : This return type is used to send binary output in response.
9. EmptyResult : This return type is used to return nothing (void) in the result.

======================================================================
 Data Formats:

 Web API handles different formats of request and response data.

 Media Type
 Media type (aka MIME type) specifies the format of the data as type/subtype e.g. text/html, text/xml, application/json, image/jpeg etc
 In HTTP request,  Media type(MIME type) is specified in the request header using Accept and Content-Type attribute.

 Accept: The Accept header attribute specifies the format of response data which the client expects
 Content-Type: The Content-Type header attribute specifies the format of the data in the request body so that receiver can parse it into appropriate format.
 For Xml : text/xml,
 For Json : application/json
 
Web API converts request data into CLR object and also serialize CLR object into response data based on Accept and Content-Type headers.
Web API includes built-in support for JSON, XML, BSON, and form-urlencoded data. It means it automatically converts request/response data into these formats OOB (out-of the box).
=============================================================================

 https://www.tutorialsteacher.com/webapi/web-api-formatters

Question:  How does WEB API handle these different formats of data??? The answer is: By using Media-Type formatters.

 Media-Type formatters

 Media type formatters are classes responsible for serializing request/response data so that Web API can understand the request data format and send data in the format which client expects.

 Like: JsonMediaTypeFormatter, []

 XmlMediaTypeFormatter        

 FormUrlEncodedMediaTypeFormatter        [Handles HTML form URL-encoded data]

 JQueryMvcFormUrlEncodedFormatter   [Handles model-bound HTML form URL-encoded data]

 GlobalConfiguration.Configuration.Formatters returns MediaTypeFormatterCollection that includes all the formatter classes.
========================================================================================
JsonMediaTypeFormatter:-----
Handles JSON format.
The JsonMediaTypeFormatter converts JSON data in an HTTP request into CLR objects (object in C# or VB.NET) and also converts CLR objects into JSON format that is embeded within HTTP response.
Internally, JsonMediaTypeFormatter uses third-party open source library called Json.NET to perform serialization.
 
The CamelCasePropertyNamesContractResolver automatically converts property names to camel case, which is the general convention for property names in JavaScript.
 
 From <https://docs.microsoft.com/en-us/aspnet/web-api/overview/getting-started-with-aspnet-web-api/build-a-single-page-application-spa-with-aspnet-web-api-and-angularjs>

 To write JSON property names with camelCase, set the CamelCasePropertyNamesContractResolver on the serializer settings as shown below. [Need to change in WebApiConfig]

 // configure json formatter

     	JsonMediaTypeFormatter jsonFormatter = config.Formatters.JsonFormatter;
      jsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
      
 OR Use single line:
  // Use camel case for JSON data.
            config.Formatters.JsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
 //

 // To Indent Json Data [To properly format data: Beautify json data/]

 config.Formatters.JsonFormatter.SerializerSettings.Formatting = Newtonsoft.Json.Formatting.Indented;

 A common request people are asking is how to disable / remove the xml formatter so that their web apis ONLY return JSON regardless of the accept header. [Need to change in WebApiConfig]

 http://codebetter.com/glennblock/2012/02/26/disabling-the-xml-formatter-in-asp-net-web-apithe-easy-way-2/

 https://weblog.west-wind.com/posts/2012/mar/09/removing-the-xml-formatter-from-aspnet-web-api-applications

 https://www.c-sharpcorner.com/UploadFile/nipuntomar/Asp-Net-web-api-remove-a-formatter/

 ----------------------------------------------------------
Question: Web API Filters

Web API includes filters to add extra logic before or after action method executes.
Filters can be used to provide cross-cutting features such as logging, exception handling, performance measurement, authentication and authorization.
Filters are actually attributes that can be applied on the Web API controller or one or more action methods.
Every filter attribute class must implement IFilter interface included in System.Web.Http.Filters namespace
 
 Exception Filter        IExceptionFilter        ExceptionFilterAttribute        Used to handle all unhandled exception in Web API

 Authorization Filter        IAuthorizationFilter        AuthorizationFilterAttribute        Used to restrict access to action methods to specific users or groups.

 Action Filter        IActionFilter        ActionFilterAttribute       	Used to add extra logic before or after action methods execute

 ---------------------

 Consume Web API in .NET using HttpClient

 The .NET 2.0 included WebClient class to communicate with web server using HTTP protocol. However, WebClient class had some limitations. The .NET 4.5 includes HttpClient class to overcome the limitation of WebClient. Here, we will use HttpClient class in console application to send data to and receive data from Web API which is hosted on local IIS web server.

------------------------------------

Dependency Injection in C#
Dependency Injection (DI) is a software design pattern. It allows us to develop loosely-coupled code.
The intent of Dependency Injection is to make code maintainable.
Dependency Injection helps to reduce the tight coupling among software components.
Dependency Injection reduces the hard-coded dependencies among your classes by injecting those dependencies at run time instead of design time technically.
 
---------------------------------------
 What is Dependency Injection Design Pattern in C#?

 The Dependency Injection Design Pattern in C# is a process in which we are injecting the object of a class into a class that depends on that object. The Dependency Injection design pattern is the most commonly used design pattern nowadays to remove the dependencies between the objects.
 https://www.c-sharpcorner.com/UploadFile/85ed7a/dependency-injection-in-C-Sharp/
 ----------------------------------------
 Different Types of Dependency Injection in C#?

 We can implement the Dependency Injection in C# in three different ways. They are as follows.
 Constructor Injection: When we supply the dependency object through the client class constructor, then it is called as Constructor Injection.
 Property Injection: When we supply the dependency object through the public property of the client class, then it is called as Property Injection.
 Method Injection: When we supply the dependency object through a public method of the client class, then it is called as Method Injection.
 https://dotnettutorials.net/lesson/dependency-injection-design-pattern-csharp/
 -------------------------------------------

 UNITY:  [For DI]

 "The Unity Application Block (Unity) is a lightweight, extensible dependency injection container that supports constructor injection, property injection, and method call injection. It provides developers with the following advantages:
It provides simplified object creation, especially for hierarchical object structures and dependencies, which simplifies application code.
It supports abstraction of requirements; this allows developers to specify dependencies at run time or in configuration and simplify management of crosscutting concerns.
It increases flexibility by deferring component configuration to the container.
It has a service location capability; this allows clients to store or cache the container. This is especially useful in ASP.NET Web applications where developers can persist the container in the ASP.NET session or application."
 ---------------------------------------------------------------------------

 Bundling:
 Bundling and minification techniques were introduced in MVC 4 to improve request load time. Bundling allow us to load the bunch of static files from the server into one http request

 Minification
 Minification technique optimizes script or css file size by removing unnecessary white space and comments and shortening variable names to one character.

 Bundle Types
 MVC 5 includes following bundle classes in System.web.Optimization namespace:
 ScriptBundle: ScriptBundle is responsible for JavaScript minification of single or multiple script files.[ScriptBundle does minification of JavaScript files.]
 StyleBundle: StyleBundle is responsible for CSS minification of single or multiple style sheet files. [StyleBundle does minification of CSS files.]
 DynamicFolderBundle: Represents a Bundle object that ASP.NET creates from a folder that contains files of the same type
 ---------------

 In ASP.NET Web API, a media-type formatter is an object that can:

 Read CLR objects from an HTTP message body

 Write CLR objects into an HTTP message body

 =============================================================================
 JSON Media-Type Formatter
 JSON formatting is provided by the JsonMediaTypeFormatter class. By default, JsonMediaTypeFormatter uses the Json.NET library to perform serialization. Json.NET is a third-party open source project.
-------------------------------------------------------------------------------
 XML Media-Type Formatter
 XML formatting is provided by the XmlMediaTypeFormatter class. By default, XmlMediaTypeFormatter uses the DataContractSerializer class to perform serialization.
 If you prefer, you can configure the XmlMediaTypeFormatter to use the XmlSerializer instead of the DataContractSerializer. To do so, set the UseXmlSerializer property to true
 var xml = GlobalConfiguration.Configuration.Formatters.XmlFormatter;
 xml.UseXmlSerializer = true;
 https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/json-and-xml-serialization
 -----------------------------------------------------------------------------

 using accept header the client can specify the format of response they want.

 If accept header is not specified, by default web api returns JSON DATA

 // Indent Json Data

 config.Formatters.JsonFormatter.SerializerSettings.Formatting = Newtonsoft.Json.Formatting.Indented;
---------------------------------------------------------------------------------------------------------
 Content Negotiation in WebAPI

 Content negotiation defined as "the process of selecting the best representation for a given response when there are multiple representations available."
 
 The primary mechanism for content negotiation in HTTP are these request headers:

 Accept: Which media types are acceptable for the response, such as "application/json," "application/xml," or a custom media type such as "application/vnd.example+xml"

 Accept-Charset: Which character sets are acceptable, such as UTF-8 or ISO 8859-1.

 Accept-Encoding: Which content encodings are acceptable, such as gzip.

 Accept-Language: The preferred natural language, such as "en-us".

 ------------------------------------------------------------
 Serialization
 If a Web API controller returns a resource as CLR type, the pipeline serializes the return value and writes it into the HTTP response body.
 ==============================================================
 
