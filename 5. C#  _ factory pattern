Question : What is Factory pattern?
Answer:  The Factory Pattern is one of the most commonly used creational design patterns in object-oriented programming, especially in scenarios where object creation logic is complex or needs to be abstracted from the client.

* Definition:
The Factory Pattern is a creational design pattern that provides an interface for creating objects in a superclass , but allows subclasses or a factory method to decide which class to instantiate. This pattern centralizes object creation and encapsulates the instantiation process, ensuring that the client code does not need to know the exact class being created.
In other words, rather than having the client code instantiate objects directly, the client interacts with a factory that produces the objects based on certain criteria. This allows the system to remain flexible and easier to extend in the future.
*UseCasE:  This pattern is particularly useful when the exact type of object to create is determined at runtime, or when we want to encapsulate the creation logic in one place, reducing dependencies on concrete classes.
* How It Works:
The Factory Pattern abstracts the creation logic away from the client. This means that the client doesn’t need to know the concrete class it’s working with. Instead, it works with a common interface or abstract class.
The actual creation of the object is delegated to the Factory class or a Factory method, which decides which specific class or subclass to instantiate, based on parameters or conditions.
* Example Use Case:
Let’s say we have different insurance plans (e.g., Commercial, Medicare, Medicaid). Instead of having logic scattered all over the application to determine which type of plan to create, a Factory would decide which plan type needs to be created based on a condition (e.g., the plan type provided by the user).

** When to Use the Factory Pattern:
1. You should consider using the Factory Pattern when:
The object creation logic needs to be decoupled from the rest of the system:
If there are complex conditions for object creation, using the Factory helps keep your code cleaner and more maintainable.

2. The client code doesn’t need to know which exact class it’s using:
The Factory allows the client to interact with the interface and not worry about the concrete class. This is helpful when multiple classes share a common interface or abstract class.

3. The object needs to be easily extendable:
If your system needs to be extended over time with more plan types or product variants, using the Factory ensures that new classes can be added without changing the existing client code.

4. The product implementation changes over time, but the client remains the same:
This is particularly useful when the business logic or the way objects are created might evolve, but the client code doesn’t need to be impacted. For example, adding new types of insurance plans would only require modifying the Factory, not the client code.

***Example Scenario in Real-World Application:
Let’s assume you are working in a healthcare insurance system with multiple types of insurance plans such as Commercial Plans, Medicare, and Medicaid. The system needs to create and manage different types of plans with unique business logic, such as eligibility criteria, coverage rules, and deductibles.

Instead of manually instantiating each plan type across the application, the Factory Pattern allows you to:

Centralize the plan creation logic in one place (e.g., PlanFactory).
Ensure flexibility for adding new plans (e.g., HSA plans) without modifying other parts of the code.
Keep client code clean: The client only interacts with the factory and works with a common interface (IInsurancePlan), not caring about the specifics of each plan.


Question : 2 Describe where and why you used the Factory pattern in your application:
"In one of the applications I worked on at Indepndent Health Insurance, we needed to manage different types of insurance plans for our members. These plans included Commercial, Medicare, and Medicaid plans, each with its own rules, coverage details, and deductibles.
We used the Factory pattern to streamline the creation of these plan objects. Instead of embedding complex conditional logic in various parts of the code to determine which type of plan to create, we centralized the creation logic in a PlanFactory class. 
This made the system more maintainable and extensible, allowing us to easily add new plan types in the future without changing the structure of the system."

**** Why This Approach Was Used:
Centralized Object Creation: Instead of writing multiple if/else or switch statements throughout the codebase to create insurance plans, the creation logic is centralized in the PlanFactory. This makes the code cleaner and more manageable.
Flexibility: If we needed to add more plan types in the future (e.g., HSA plans or Catastrophic plans), we could simply add a new class for the plan and update the factory without touching the rest of the system.
Maintainability: With this design, we minimize the risk of errors and duplication. If a plan's creation logic changes (e.g., different rules for coverage), we only need to update the respective plan class, and the rest of the system remains untouched.
Scalability: The Factory pattern makes it easy to scale the system. As new plan types are added or existing plans evolve, changes are isolated in the Factory and the respective plan classes, leading to faster development and easier testing.

Question : 3. Explain the business purpose and how it added value:
"By using the Factory pattern, we ensured that the system could dynamically choose the right insurance plan type for a member based on their profile and data. For example, if a member was enrolled in a Commercial Plan, the system would create a CommercialPlan object to handle the specific rules and coverage details for that plan. Similarly, if the member had a Medicare Plan, the system would create a MedicarePlan object, with its own set of rules for eligibility, coverage, and deductibles. For members enrolled in a Medicaid Plan, the system would instantiate the MedicaidPlan object, which would manage the corresponding low-income eligibility and coverage rules.
This approach decoupled the logic for creating different types of insurance plans from the rest of the application. As a result, we could easily extend the system by adding new insurance plan types (e.g., HSA plans or Catastrophic plans) or modifying existing plans without affecting other parts of the system. This made the architecture more maintainable and flexible.
From a business perspective, the Factory pattern added significant value by enabling the system to scale easily as new insurance plans or features were introduced. For example, if we needed to adjust the rules for deductibles or add new coverage options for a plan, we only had to update the PlanFactory class to support the new plan type or update existing logic. This centralization of the plan creation logic meant that we didn’t have to change the entire system when introducing new plan types, ensuring that our development cycle remained quick and efficient.
Additionally, this approach helped us maintain consistency in how we handled the different plans. It allowed for clear separation of concerns, where each plan type was responsible for its own details, making it easier to test, maintain, and debug."

Key Points:
Dynamic Plan Creation: The Factory pattern allowed the system to create specific plan objects (Commercial, Medicare, Medicaid) based on the member’s plan type.
Decoupling: By separating the plan creation logic into a factory, the system became more maintainable, as changes or additions to one plan type didn’t impact others.
Business Flexibility: The system could quickly scale as new plan types were added, and it ensured flexibility in adapting to changing rules for existing plans (e.g., changes to deductibles, coverage, or eligibility).
Consistency and Maintainability: Centralizing the creation logic ensured that new features could be added with minimal risk of breaking existing functionality, keeping the system clean, consistent, and easy to manage.
This version focuses on the Commercial, Medicare, and Medicaid plans specifically, but the core idea is the same: using the Factory pattern to manage different insurance plans with flexibility and scalability, ensuring that new plans can be added or existing plans modified without disrupting the rest of the system.

EXAMPLE:
1. PlanFactory and Insurance Plans (Adjusted for Dependency Injection):
First, let’s keep the PlanFactory and InsurancePlan classes mostly the same, but make sure they are structured to work with dependency injection (DI).

// Abstract base class for all Insurance Plans
public abstract class InsurancePlan
{
    public string PlanName { get; set; }  // The name of the insurance plan
    public abstract void DisplayPlanDetails();  // Abstract method to display plan details
}

// Concrete class for Commercial Insurance Plan
public class CommercialPlan : InsurancePlan
{
    public CommercialPlan()
    {
        PlanName = "Commercial Plan";  // Set the plan name
    }

    // Display specific details for the Commercial plan
    public override void DisplayPlanDetails()
    {
        Console.WriteLine("Commercial Plan: Offers coverage for a variety of medical services.");
    }
}

// Concrete class for Medicare Insurance Plan
public class MedicarePlan : InsurancePlan
{
    public MedicarePlan()
    {
        PlanName = "Medicare Plan";  // Set the plan name
    }

    // Display specific details for the Medicare plan
    public override void DisplayPlanDetails()
    {
        Console.WriteLine("Medicare Plan: Government-funded healthcare for people aged 65+.");
    }
}

// Concrete class for Medicaid Insurance Plan
public class MedicaidPlan : InsurancePlan
{
    public MedicaidPlan()
    {
        PlanName = "Medicaid Plan";  // Set the plan name
    }

    // Display specific details for the Medicaid plan
    public override void DisplayPlanDetails()
    {
        Console.WriteLine("Medicaid Plan: Provides health coverage for low-income individuals.");
    }
}

// Interface for PlanFactory (to be used for Dependency Injection)
public interface IPlanFactory
{
    InsurancePlan GetPlan(string planType);
}

// Concrete Factory class to create Insurance Plan objects
public class PlanFactory : IPlanFactory
{
    // Method to create the correct type of insurance plan
    public InsurancePlan GetPlan(string planType)
    {
        switch (planType)
        {
            case "Commercial":
                return new CommercialPlan();  // Return a new Commercial plan
            case "Medicare":
                return new MedicarePlan();  // Return a new Medicare plan
            case "Medicaid":
                return new MedicaidPlan();  // Return a new Medicaid plan
            default:
                throw new ArgumentException("Invalid plan type");  // Handle invalid plan type
        }
    }
}

2. ASP.NET Core Web API Controller:
In an ASP.NET Core Web API, controllers are used to handle HTTP requests. We'll create a controller to interact with the PlanFactory and return the corresponding plan details.
using Microsoft.AspNetCore.Mvc;

// Web API Controller for handling insurance plans
[ApiController]
[Route("api/[controller]")]
public class InsurancePlanController : ControllerBase
{
    private readonly IPlanFactory _planFactory;

    // Constructor with Dependency Injection for IPlanFactory
    public InsurancePlanController(IPlanFactory planFactory)
    {
        _planFactory = planFactory;
    }

    // GET api/insuranceplan/{planType}
    [HttpGet("{planType}")]
    public IActionResult GetPlan(string planType)
    {
        try
        {
            // Create the correct insurance plan using the PlanFactory
            var plan = _planFactory.GetPlan(planType);

            // Return a response with the plan details
            return Ok(new
            {
                plan.PlanName,
                PlanDetails = plan.DisplayPlanDetails()
            });
        }
        catch (ArgumentException ex)
        {
            // Return a 400 Bad Request if the plan type is invalid
            return BadRequest(new { Message = ex.Message });
        }
    }
}


